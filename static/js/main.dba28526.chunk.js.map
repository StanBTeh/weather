{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Icon.js","components/WeatherCard/Condition.js","components/WeatherCard/component.js","App.js","serviceWorker.js","index.js"],"names":["Location","props","Container","styled","div","City","h1","Country","h3","city","country","Icon","img","className","src","alt","Condition","Temp","WeatherCard","highColor","temp","lowColor","Card","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mrBAGA,IA2BeA,EA3BE,SAACC,GAChB,IAAMC,EAAYC,IAAOC,IAAV,KAITC,EAAOF,IAAOG,GAAV,KAOJC,EAAUJ,IAAOK,GAAV,KAOb,OACE,kBAACN,EAAD,KACE,kBAACG,EAAD,KAAOJ,EAAMQ,MACb,kBAACF,EAAD,KAAUN,EAAMS,W,6FCtBtB,IAUeC,EAVF,SAACV,GACZ,IAAMU,EAAOR,IAAOS,IAAV,KAIV,OACE,kBAACD,EAAD,CAAME,UAAU,OAAOC,IAAI,yBAAyBC,IAAI,kB,8aCN5D,IAwBeC,EAxBG,SAACf,GACjB,IAAMgB,EAAOd,IAAOG,GAAV,KAQJU,EAAYb,IAAOK,GAAV,KAOf,OACE,6BACE,kBAACS,EAAD,iBACA,kBAACD,EAAD,iB,wXChBN,IA4BeE,EA5BK,SAACjB,GACnB,IAAIkB,EAA2C,KAA9B,GAAKlB,EAAMmB,KAAO,IAAM,IACrCC,EAAWF,EAAY,IACrBG,EAAOnB,IAAOC,IAAV,IAIKe,EACAE,GAWf,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAUb,KAAMR,EAAMQ,OACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCfSc,MAVf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAAaO,KAAK,KAAKX,KAAK,SAC5B,kBAAC,EAAD,CAAaW,KAAK,KAAKX,KAAK,WAC5B,kBAAC,EAAD,CAAaW,KAAK,KAAKX,KAAK,eCGde,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dba28526.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Location = (props) => {\r\n  const Container = styled.div`\r\n    text-align: center;\r\n  `;\r\n\r\n  const City = styled.h1`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.6rem;\r\n    padding-bottom: 0 auto;\r\n    margin: 0 auto;\r\n  `;\r\n\r\n  const Country = styled.h3`\r\n    font-family: \"Fira sans\", sans-serif;\r\n    font-size: 1.1rem;\r\n    margin: 0 auto;\r\n    padding-bottom: 15px;\r\n  `;\r\n\r\n  return (\r\n    <Container>\r\n      <City>{props.city}</City>\r\n      <Country>{props.country}</Country>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Icon = (props) => {\r\n  const Icon = styled.img`\r\n    height: 100px;\r\n  `;\r\n\r\n  return (\r\n    <Icon className=\"icon\" src=\"./img/cloudy-day-2.svg\" alt=\"Weather Icon\" />\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Condition = (props) => {\r\n  const Temp = styled.h1`\r\n    font-family: \"Fira sans\", sans-serif;\r\n    font-size: 1.6rem;\r\n    font-weight: 200;\r\n    padding: 0 auto;\r\n    margin: 0;\r\n    text-align: center;\r\n  `;\r\n  const Condition = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1rem;\r\n    padding: 0 auto;\r\n    margin: 0;\r\n    text-align: center;\r\n  `;\r\n  return (\r\n    <div>\r\n      <Temp>28 Â°C</Temp>\r\n      <Condition>Cloudy</Condition>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Condition;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Location from \"./Location\";\r\nimport Icon from \"./Icon\";\r\nimport Condition from \"./Condition\";\r\n\r\nconst WeatherCard = (props) => {\r\n  let highColor = (1 - (props.temp - 12) / 28) * 255;\r\n  let lowColor = highColor - 150;\r\n  const Card = styled.div`\r\n    margin: 0 auto;\r\n    background: linear-gradient(\r\n      to top,\r\n      rgb(255, ${highColor}, 0),\r\n      rgb(255, ${lowColor}, 0)\r\n    );\r\n    width: 200px;\r\n    height: 240px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n  `;\r\n\r\n  return (\r\n    <Card>\r\n      <Location city={props.city} />\r\n      <Icon />\r\n      <Condition />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport WeatherCard from \"./components/WeatherCard/component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherCard temp=\"21\" city=\"Stan\" />\n      <WeatherCard temp=\"25\" city=\"Nadine\" />\n      <WeatherCard temp=\"40\" city=\"Ysabelle\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}